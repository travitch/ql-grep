// This module defines all of the types and methods available in the ql-grep
// implementation of CodeQL. The goal is that this file serves as both documentation
// and as a specification for the type checker in the query parser/planner.
//
// Each top-level node encodes the API for a single type
//
// Methods with no arguments omit the arguments block
//
// Primitives are a subset of CodeQL:
//   - int
//   - boolean
//   - string

type "Function" {
    contains "Parameter"
    contains "Call"
    method "getAParameter" type="Relational<Parameter>"  tag="[tag:library:Function:getAParameter]" \
        docstring=r"Return any parameter in the function signature; this is intended to be used in a relational context."
    method "getParameter" type="Parameter" status="Unimplemented" {
        parameter "index" type="int"
    }
    method "getType" type="Type" status="Unimplemented" tag="[tag:library:function:getType]"
    method "getName" type="string" tag="[tag:library:Function:getName]"
    method "getACall" type="Relational<Call>" status="Unimplemented" \
        docstring=r"Return a call expression in the body of this object"
    method "hasParseError" type="boolean" tag="[tag:library:Function:hasParseError]" \
        docstring=r"Returns True if the function contains a parse error"
}

type "Method" {
    contains "Parameter"
    contains "Call"
    method "getAParameter" type="Relational<Parameter>" tag="[tag:library:Method:getAParameter]" \
        docstring=r"Return any parameter in the method signature; this is intended to be used in a relational context."
    method "getParameter" type="Parameter" status="Unimplemented" {
        parameter "index" type="int"
    }
    method "getType" type="Type" status="Unimplemented"
    method "getName" type="string" tag="[tag:library:Method:getName]"
    method "getACall" type="Relational<Call>" status="Unimplemented" \
        docstring=r"Return a call expression in the body of this object"
    method "hasParseError" type="boolean" tag="[tag:library:Method:hasParseError]" \
        docstring=r"Returns True if the method contains a parse error"
}

type "Callable" {
    contains "Parameter"
    contains "Call"
    method "getAParameter" type="Relational<Parameter>" tag="[tag:library:Callable:getAParameter]" \
        docstring=r"Return any parameter in signature of the callable; this is intended to be used in a relational context."
    method "getParameter" type="Parameter" status="Unimplemented" {
        parameter "index" type="int"
    }
    method "getType" type="Type" status="Unimplemented"
    method "getName" type="string" tag="[tag:library:Callable:getName]"
    method "getACall" type="Relational<Call>" status="Unimplemented" \
        docstring=r"Return a call expression in the body of this object"
    method "hasParseError" type="boolean" tag="[tag:library:Callable:hasParseError]" \
        docstring=r"Returns True if the callable contains a parse error"
}

// Parameters are *formal* parameters of function definitions/declarations
type "Parameter" {
    method "getType" type="Type" tag="[tag:library:Parameter:getType]" \
        docstring=r"Return the type of the parameter (`Any` if the language is untyped)."
    method "getName" type="string" tag="[tag:library:Parameter:getName]"
    method "getIndex" type="int" tag="[tag:library:Parameter:getIndex]" \
        docstring=r"Return the index of the parameter in the argument list"
}

type "Call" {
    contains "Expr"
    method "getArgument" type="Expr" status="Unimplemented" {
        parameter "index" type="int"
    }
    method "getAnArgument" type="Expr" status="Unimplemented"
    method "getTarget" type="string" status="Unimplemented" \
        docstring=r"Return the target of the call; this is a string because there is not necessarily a structured declaration available"
}

type "Expr" {
    method "isCompileTimeConstant" type="boolean" status="Unimplemented" \
        docstring=r"Returns `true` if the expression is a literal at compile time"
}

type "Type" {
    method "getName" type="string" tag="[tag:library:Type:getName]"
}

type "Regex" {

}

type "string" {
    method "regexpMatch" type="boolean" tag="[tag:library:string:regexpMatch]" {
        parameter "regexp" type="Regex"
    }
}
